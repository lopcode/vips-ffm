// Generated by jextract

package app.photofox.vipsffm.jextract;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _VipsArea {
 *     void *data;
 *     size_t length;
 *     int n;
 *     int count;
 *     GMutex lock;
 *     VipsCallbackFn free_fn;
 *     void *client;
 *     GType type;
 *     size_t sizeof_type;
 * }
 * }
 */
public class _VipsArea {

    _VipsArea() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        VipsRaw.C_POINTER.withName("data"),
        VipsRaw.C_LONG.withName("length"),
        VipsRaw.C_INT.withName("n"),
        VipsRaw.C_INT.withName("count"),
        _GMutex.layout().withName("lock"),
        VipsRaw.C_POINTER.withName("free_fn"),
        VipsRaw.C_POINTER.withName("client"),
        VipsRaw.C_LONG.withName("type"),
        VipsRaw.C_LONG.withName("sizeof_type")
    ).withName("_VipsArea");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfInt n$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static final OfInt n$layout() {
        return n$LAYOUT;
    }

    private static final long n$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static final long n$offset() {
        return n$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static int n(MemorySegment struct) {
        return struct.get(n$LAYOUT, n$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n
     * }
     */
    public static void n(MemorySegment struct, int fieldValue) {
        struct.set(n$LAYOUT, n$OFFSET, fieldValue);
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final GroupLayout lock$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("lock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GMutex lock
     * }
     */
    public static final GroupLayout lock$layout() {
        return lock$LAYOUT;
    }

    private static final long lock$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GMutex lock
     * }
     */
    public static final long lock$offset() {
        return lock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GMutex lock
     * }
     */
    public static MemorySegment lock(MemorySegment struct) {
        return struct.asSlice(lock$OFFSET, lock$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GMutex lock
     * }
     */
    public static void lock(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lock$OFFSET, lock$LAYOUT.byteSize());
    }

    private static final AddressLayout free_fn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_fn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VipsCallbackFn free_fn
     * }
     */
    public static final AddressLayout free_fn$layout() {
        return free_fn$LAYOUT;
    }

    private static final long free_fn$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VipsCallbackFn free_fn
     * }
     */
    public static final long free_fn$offset() {
        return free_fn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VipsCallbackFn free_fn
     * }
     */
    public static MemorySegment free_fn(MemorySegment struct) {
        return struct.get(free_fn$LAYOUT, free_fn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VipsCallbackFn free_fn
     * }
     */
    public static void free_fn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_fn$LAYOUT, free_fn$OFFSET, fieldValue);
    }

    private static final AddressLayout client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *client
     * }
     */
    public static final AddressLayout client$layout() {
        return client$LAYOUT;
    }

    private static final long client$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *client
     * }
     */
    public static final long client$offset() {
        return client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *client
     * }
     */
    public static MemorySegment client(MemorySegment struct) {
        return struct.get(client$LAYOUT, client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *client
     * }
     */
    public static void client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(client$LAYOUT, client$OFFSET, fieldValue);
    }

    private static final OfLong type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static final OfLong type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static long type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GType type
     * }
     */
    public static void type(MemorySegment struct, long fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfLong sizeof_type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sizeof_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t sizeof_type
     * }
     */
    public static final OfLong sizeof_type$layout() {
        return sizeof_type$LAYOUT;
    }

    private static final long sizeof_type$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t sizeof_type
     * }
     */
    public static final long sizeof_type$offset() {
        return sizeof_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t sizeof_type
     * }
     */
    public static long sizeof_type(MemorySegment struct) {
        return struct.get(sizeof_type$LAYOUT, sizeof_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t sizeof_type
     * }
     */
    public static void sizeof_type(MemorySegment struct, long fieldValue) {
        struct.set(sizeof_type$LAYOUT, sizeof_type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

