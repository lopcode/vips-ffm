// Generated by jextract

package app.photofox.vipsffm.jextract;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union _GMutex {
 *     gpointer p;
 *     guint i[2];
 * }
 * }
 */
public class _GMutex {

    _GMutex() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        VipsRaw.C_POINTER.withName("p"),
        MemoryLayout.sequenceLayout(2, VipsRaw.C_INT).withName("i")
    ).withName("_GMutex");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout p$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gpointer p
     * }
     */
    public static final AddressLayout p$layout() {
        return p$LAYOUT;
    }

    private static final long p$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gpointer p
     * }
     */
    public static final long p$offset() {
        return p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gpointer p
     * }
     */
    public static MemorySegment p(MemorySegment union) {
        return union.get(p$LAYOUT, p$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gpointer p
     * }
     */
    public static void p(MemorySegment union, MemorySegment fieldValue) {
        union.set(p$LAYOUT, p$OFFSET, fieldValue);
    }

    private static final SequenceLayout i$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("i"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static final SequenceLayout i$layout() {
        return i$LAYOUT;
    }

    private static final long i$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static final long i$offset() {
        return i$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static MemorySegment i(MemorySegment union) {
        return union.asSlice(i$OFFSET, i$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static void i(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, i$OFFSET, i$LAYOUT.byteSize());
    }

    private static long[] i$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static long[] i$dimensions() {
        return i$DIMS;
    }
    private static final VarHandle i$ELEM_HANDLE = i$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static int i(MemorySegment union, long index0) {
        return (int)i$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * guint i[2]
     * }
     */
    public static void i(MemorySegment union, long index0, int fieldValue) {
        i$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

